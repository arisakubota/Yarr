#!/usr/bin/env python3
#################################
# Author: Arisa Kubota
# Email: arisa.kubota at cern.ch
# Date: July 2019
# Project: Local Database for YARR
#################################

# Common
import os, sys, requests, json, argparse, yaml, shutil
from getpass    import getpass
from pymongo    import MongoClient, errors

sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),'../lib/localdb-tools/modules'))

### log
import db_logging
import logging
logger = logging.getLogger('Log')
db_logging.setLog()

home = os.environ['HOME']
if not "HOSTNAME" in os.environ:
    hostname = "default_host"
else:
    hostname = os.environ["HOSTNAME"]

global my_user
global my_pwd
global authentication

def readConfig(conf_path):
    f = open(conf_path, 'r')
    conf = yaml.load(f, Loader=yaml.SafeLoader)
    return conf

def readKey(i_path):
    file_text = open(i_path, 'r')
    file_keys = file_text.read().split()
    keys = {
        'username': file_keys[0],
        'password': file_keys[1]
    }
    file_text.close()
    return keys

def getArgs():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument(
        "command",
        help="option*\tfuntion\ninit\tFunction initialization & Connection check\nlog\tDisplay data log\npull\tData retrieve\nlist\tDisplay data list\ntest\tTesting command",
        type=str,
        nargs='+'
    )
    parser.add_argument('--config', help='Set User Config Path of Local DB Server.', type=str)
    parser.add_argument('--username', help='Set the User Name of Local DB Server.', type=str)
    parser.add_argument('--password', help='Set the Password of Local DB Server.', type=str)
    parser.add_argument('--database', help='Set Database Config Path', type=str)
    parser.add_argument('--user', help='Set the name of the user.', type=str)
    parser.add_argument('--site', help='Set the name of the site.', type=str)
    parser.add_argument('--chip', help='Set the name of the chip.', type=str)
    parser.add_argument('--test', help='Set data ID of the test.', type=str)
    parser.add_argument('--directory', help='Provide directory name.', type=str, default='./db-data')

    args = parser.parse_args()

    if args.config is not None:
        conf = readConfig(args.config)    # Read from config file
        if 'user'      in conf and not args.user:      args.user = conf['user']
        if 'site'      in conf and not args.site:      args.site = conf['site']
        if 'chip'      in conf and not args.chip:      args.chip = conf['chip']
        if 'directory' in conf and not args.directory: args.directory = conf['directory']

    return args

########################################################
# File to Json
# If file path is not provided /or/ file dose not exist,
# return {}
# If file exist, return {json}
# But if file cannot be paresed, alert(error)
def toJson(i_file_path):
    logger.debug('\t\t\tConvert to json code from: {}'.format(i_file_path))

    file_json = {}
    if i_file_path:
        if os.path.isfile(i_file_path):
            try:
                with open(i_file_path, 'r') as f: file_json = json.load(f)
            except ValueError as e:
                message = []
                message.append('Could not parse {}'.format(i_file_path))
                message.append('\twhat(): {}',format(e))
                alert(message)

    return file_json

##########################
### Display log on console
def printLog(message):
    global lines
    global size

    if lines<size:
        print(message)
        lines+=1
    else:
        try:
            input(message)
        except KeyboardInterrupt:
            print('')
            sys.exit()

######################
### main functions ###
######################

############
# Initialize
# Check the retrieve directory and connection to Local DB
def __init():
    logger.debug('Initialize.')

    args = getArgs()

    if db_cfg=={}:
        logger.error('There is no default database config in {}/.yarr/localdb'.format(home))
        logger.error('Set it by YARR/localdb/setup_db.sh')
        logger.info('-----------------------')
        logger.debug('=======================')
        sys.exit(1)

    service = db_cfg.get('service', 'mongodb')
    if service=='viewer':
        url = 'http://{0}:{1}/localdb/'.format(db_cfg.get('hostIp','127.0.0.1'), db_cfg.get('hostPort',5000))
        connection = __network_viewer(url)
    else:
        url = 'mongodb://{0}:{1}'.format(db_cfg.get('hostIp','127.0.0.1'), db_cfg.get('hostPort',27017))
        ### check tls/ssl
        db_tls = db_cfg.get('tls', {}).get('enabled',False)
        db_ssl = db_cfg.get('ssl', {}).get('enabled',False)
        if db_tls:
            db_certfile = db_cfg.get('tls', {}).get('CertificateKeyFile',None)
            db_ca_certs = db_cfg.get('tls', {}).get('CAFile',None)
        elif db_ssl:
            db_certfile = db_cfg.get('ssl', {}).get('PEMKeyFile',None)
            db_ca_certs = db_cfg.get('ssl', {}).get('CAFile',None)
        if db_tls or db_ssl:
            url+='/?ssl=true&ssl_ca_certs={0}&ssl_certfile={1}&ssl_match_hostname=false'.format(db_ca_certs,db_certfile)
            ### authenticate mechanism
            if db_cfg.get('auth',None)=='x509':
                url+='&authMechanism=MONGODB-X509'
        connection = __network_db(url, db_cfg.get('dbName', 'localdb'))
    response = {
        'service': service,
        'connection': connection,
        'url':url
    }

    return response

def __network_db(url, db_name):
    logger.info('[Connection Test] DB Server: {0}/{1}'.format(url, db_name))

    global authentication
    authentication = False
    username = None
    password = None
    max_server_delay = 1
    client = MongoClient(url, serverSelectionTimeoutMS=max_server_delay)
    localdb = client[db_name]
    try:
        localdb.list_collection_names()
        logger.info('---> Connection is GOOD.')
        return True
    except errors.ServerSelectionTimeoutError as err:
        logger.error('---> Connection is BAD.')
        logger.error('     {}'.format(err))
        logger.error('     Access https://localdb-docs.readthedocs.io/en/master/faq/ to check more detail')
        return False
    except errors.OperationFailure as err:
        ### Need user authentication
        if db_cfg.get('KeyFile',None):
            if not db_cfg['KeyFile'] == 'null':
                keys = readKey(db_cfg['KeyFile'])
                username = keys['username']
                password = keys['password']
        if args.username:
            username = args.username
        elif db_cfg.get('username',None):
            username = db_cfg['username']
        elif os.environ.get('username',None):
            username = os.environ['username']
        else:
            username = ""
        if args.password:
            password = args.password
        elif db_cfg.get('password',None):
            password = db_cfg['password']
        elif os.environ.get('password',None):
            password = os.environ['password']
        else:
            password = ""

        global my_user
        global my_pwd
        my_user = username
        my_pwd = password
        try:
            localdb.authenticate(my_user, my_pwd)
            logger.info('---> Connection is GOOD.')
            os.environ['username'] = my_user
            os.environ['password'] = my_pwd
            authentication = True
            return True
        except errors.OperationFailure as err:
            logger.error('This scan did not store in LocalDB because of the authentication. Please login by "source localdb/login_mongodb.sh"')
            return False
        except:
            logger.error('This scan did not store in LocalDB because of the authentication. Please login by "source localdb/login_mongodb.sh"')
            return False

def __network_viewer(url):
    logger.info('[Connection Test] Viewer: {}'.format(url))
    try:
        response = requests.get(url)
        if response.status_code == 200:
            logger.info('---> Connection is GOOD.')
            return True
        else:
            logger.warning('---> Connection is BAD.')
            logger.warning('     Something wrong in the page.')
            return False
    except Exception as err:
        logger.warning('---> Connection is BAD.')
        logger.warning('     {}'.format(err))
        return False

def main():
    logger.debug('=======================')
    logger.debug('Main Function.')

    global lines
    global size
    lines = 0
    size = shutil.get_terminal_size().lines-6

    global args
    args = getArgs()
    command = args.command
    nargs = len(args.command)-1

    if command[0]=='test':
        logger.debug('=======================')
        sys.exit(0)

    logger.info('-----------------------')

    global db_cfg
    if args.database:
        db_cfg = toJson(args.database)
    else:
        db_cfg = toJson('{0}/.yarr/localdb/{1}_database.json'.format(home, hostname))

    if command[0]=='init':
        if not nargs==0:
            logger.error('Usage: localdbtool-retrieve init [--database <dbCfg>]')
            logger.info('-----------------------')
            logger.debug('=======================')
            sys.exit(1)
        logger.info('Function: Initialize')
        __init()
        logger.info('-----------------------')
        logger.debug('=======================')
        sys.exit(0)

    response = __init()
    if response['connection']:
        if response['service']=='viewer':
            import indirect as function
            function.url = response['url']
        else:
            import direct as function
            max_server_delay = 1
            url = response['url']
            localdb = MongoClient(url, serverSelectionTimeoutMS=max_server_delay)[db_cfg.get('dbName', 'localdb')]
            if authentication:
                localdb.authenticate(my_user, my_pwd)
            function.__set_localdb(localdb)
    else:
        logger.error('Could not access Local DB')
        logger.error('Try later or by another remote')
        logger.info('-----------------------')
        logger.debug('=======================')
        sys.exit(1)

    if command[0]=='log':
        if not nargs==0:
            logger.error('Usage: localdbtool-retrieve log [--database <dbCfg>] [--user <user_name>] [--site <site_name>] [--chip <chip_name>]')
            logger.info('-----------------------')
            logger.debug('=======================')
            sys.exit(1)
        r_json = function.__log(args)
        for test_data in r_json['log']:
            printLog('\033[1;33mtest data ID: {0} \033[0m'.format(test_data['runId']))
            printLog('User      : {0} at {1}'.format(test_data['user'], test_data['site']))
            printLog('Date      : {0}'.format(test_data['datetime']))
            printLog('Chip      : {0}'.format(', '.join(test_data['chips'])))
            printLog('Run Number: {0}'.format(test_data['runNumber']))
            printLog('Test Type : {0}'.format(test_data['testType']))
            if test_data.get('environment',{})=={}:
                printLog('DCS Data  : NULL')
            else:
                printLog('DCS Data  :')
                for chip in test_data.get('environment',{}):
##
                    if args.chip==chip:
                        printLog('   \033[1;31m{0} ({1})\033[0m'.format(', '.join(test_data['environment'][chip]), chip))
                    else:
                        printLog('   {0} ({1})'.format(', '.join(test_data['environment'][chip]), chip))
            printLog('')
        logger.info('-----------------------')
        logger.debug('=======================')
        sys.exit(0)
    if command[0]=='pull':
        if args.chip and args.test:
            logger.error('Usage: localdbtool-retrieve pull --chip <chip_name> [--directory <dir>] [--database <dbCfg>]')
            logger.error('   or: localdbtool-retrieve pull --test <test_ID> [--directory <dir>] [--database <dbCfg>]')
            logger.info('-----------------------')
            logger.debug('=======================')
            sys.exit(1)
        if args.user or args.site:
            logger.error('Usage: localdbtool-retrieve pull --chip <chip_name> [--directory <dir>] [--database <dbCfg>]')
            logger.error('   or: localdbtool-retrieve pull --test <test_ID> [--directory <dir>] [--database <dbCfg>]')
            logger.info('-----------------------')
            logger.debug('=======================')
            sys.exit(1)
        if not nargs==0:
            logger.error('Usage: localdbtool-retrieve pull --chip <chip_name> [--directory <dir>] [--database <dbCfg>]')
            logger.error('   or: localdbtool-retrieve pull --test <test_ID> [--directory <dir>] [--database <dbCfg>]')
            logger.info('-----------------------')
            logger.debug('=======================')
            sys.exit(1)
        # make directory
        dir_path = args.directory
        logger.info('Retrieve/Create data files in {}'.format(dir_path))
        if dir_path=='localdb':
            logger.error('Not set directory name to "localdb"')
            sys.exit()
        if os.path.isdir(dir_path):
            logger.warning('Already exist directory: {}.'.format(dir_path))
            answer = input('\nOverride it? [y/n] (Exit without doing anything if "n")\n> ')
            print('')
            if answer.lower()=='y':
                shutil.rmtree(dir_path)
            else:
                sys.exit()
        os.makedirs(dir_path)
        console_data = function.__pull(dir_path, args)
        logger.info('\033[1;33m{0} data ID: {1} \033[0m'.format(console_data['col'], console_data['_id']))
        for key in console_data['log']:
            if console_data['log'][key]:
                logger.info('- {0:<10}: {1}'.format(key,console_data['log'][key]))
        for data in console_data['data']:
            logger.info('Retrieve ... {}'.format(data['path']))
            if data['type']=='json':
                with open(data['path'], 'w') as f:
                    json.dump(data['data'], f, indent=4)
            else:
                with open(data['path'], 'w') as f:
                    f.write(data['data'])


        logger.warning('\033[31mPlease check "db-data/connectivity" and confirm the testing stage.\033[0m')
        logger.info('-----------------------')
        logger.debug('=======================')
        sys.exit(0)
    if command[0]=='list':
        if nargs==0:
            opt = 'component'
        elif nargs==1 and (command[1]=='component' or command[1]=='user' or command[1]=='site'):
            opt = command[1]
        else:
            logger.error('Usage: localdbtool-retrieve list')
            logger.error('   or: localdbtool-retrieve list component')
            logger.error('   or: localdbtool-retrieve list user')
            logger.error('   or: localdbtool-retrieve list site')
            logger.info('-----------------------')
            logger.debug('=======================')
            sys.exit(1)
        if opt=='component':
            r_json = function.__list_component()
            printLog('')
            for docs in r_json['parent']:
                printLog('\033[1;33m{0}: {1} \033[0m'.format(docs['type'], docs['name']))
                printLog('User      : {0} at {1}'.format(docs['user'], docs['site']))
                printLog('Chip Type : {0}'.format(docs['asic']))
                printLog('Chips({0})  :'.format(len(docs['chips'])))
                for oid in docs['chips']:
                    chip_docs = r_json['child'][oid]
                    printLog('\033[1;33m    {0}: {1} \033[0m'.format(chip_docs['type'], chip_docs['name']))
                    printLog('    User  : {0} at {1}'.format(chip_docs['user'], chip_docs['site']))
                    printLog('    ChipId: {0}'.format(chip_docs['chipId']))
                    del r_json['child'][oid]
                printLog('')
            for oid in r_json['child']:
                docs = r_json['child'][oid]
                printLog('\033[1;33m{0}: {1} \033[0m'.format(docs['type'], docs['name']))
                printLog('User      : {0} at {1}'.format(docs['user'], docs['site']))
                printLog('Chip Type : {0}'.format(docs['asic']))
                printLog('ChipId    : {0}'.format(docs['chipId']))
                printLog('')

        elif opt=='user':
            r_json = function.__list_user()

            printLog('')
            for user in r_json:
                printLog('\033[1;33mUser Name: {0}\033[0m'.format(user))
                for docs in r_json[user]:
                    printLog('- {0}'.format(docs))
                printLog('')

        elif opt=='site':
            r_json = function.__list_site()
            printLog('')
            for site in r_json['site']:
                printLog('- {0}'.format(site))
            printLog('')

        logger.info('-----------------------')
        logger.debug('=======================')
        sys.exit(0)

if __name__ == '__main__': main()
